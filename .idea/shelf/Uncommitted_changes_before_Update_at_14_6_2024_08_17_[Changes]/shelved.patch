Index: src/main/java/com/example/buensaborback/presentation/rest/PedidoController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.buensaborback.presentation.rest;\r\n\r\nimport com.example.buensaborback.business.facade.impl.PedidoFacadeImpl;\r\nimport com.example.buensaborback.business.services.PedidoService;\r\nimport com.example.buensaborback.domain.dto.Pedido.PedidoCreateDto;\r\nimport com.example.buensaborback.domain.dto.Pedido.PedidoDto;\r\nimport com.example.buensaborback.domain.entities.Pedido;\r\nimport com.example.buensaborback.domain.enums.Estado;\r\nimport com.example.buensaborback.presentation.base.BaseControllerImpl;\r\nimport com.example.buensaborback.repositories.PedidoRepository;\r\nimport com.mercadopago.resources.preference.Preference;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.format.annotation.DateTimeFormat;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\r\nimport org.springframework.web.servlet.view.RedirectView;\r\n\r\nimport java.time.LocalDate;\r\nimport java.time.ZoneId;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Optional;\r\nimport java.util.stream.Collectors;\r\n\r\n@RestController\r\n@CrossOrigin(\"*\")\r\n@RequestMapping(\"/pedido\")\r\npublic class PedidoController extends BaseControllerImpl<Pedido, PedidoDto, PedidoCreateDto, PedidoCreateDto, Long, PedidoFacadeImpl> {\r\n    @Autowired\r\n    private PedidoRepository pedidoRepository;\r\n    @Autowired\r\n    private PedidoService pedidoService;\r\n\r\n    public PedidoController(PedidoFacadeImpl facade) {\r\n        super(facade);\r\n    }\r\n\r\n    @GetMapping(\"/ingresos/{idSucursal}\")\r\n    public Optional<Double> getIngresos(@RequestParam @DateTimeFormat(pattern = \"yyyy-MM-dd\") Date fechaInicio, @RequestParam @DateTimeFormat(pattern = \"yyyy-MM-dd\") Date fechaFin, @PathVariable Long idSucursal) {\r\n        LocalDate inicio = fechaInicio.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();\r\n        LocalDate fin = fechaFin.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();\r\n        return pedidoRepository.getIngresos(inicio, fin, idSucursal);\r\n    }\r\n\r\n    @GetMapping(\"/cantidad-pedidos-por-cliente/{idSucursal}\")\r\n    public List<Object[]> getCantidadPedidosPorCliente(@RequestParam @DateTimeFormat(pattern = \"yyyy-MM-dd\") Date fechaInicio, @RequestParam @DateTimeFormat(pattern = \"yyyy-MM-dd\") Date fechaFin, @PathVariable Long idSucursal) {\r\n        LocalDate inicio = fechaInicio.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();\r\n        LocalDate fin = fechaFin.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();\r\n        return pedidoRepository.getCantidadPedidosPorCliente(inicio, fin, idSucursal);\r\n    }\r\n\r\n    @GetMapping(\"/ganancia/{idSucursal}\")\r\n    public Optional<Double> getGanancia(@RequestParam @DateTimeFormat(pattern = \"yyyy-MM-dd\") Date fechaInicio, @RequestParam @DateTimeFormat(pattern = \"yyyy-MM-dd\") Date fechaFin, @PathVariable Long idSucursal) {\r\n        LocalDate inicio = fechaInicio.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();\r\n        LocalDate fin = fechaFin.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();\r\n        return pedidoRepository.getGanancia(inicio, fin, idSucursal);\r\n    }\r\n\r\n    @GetMapping(\"/ranking-articulos/{idSucursal}\")\r\n    public List<Object[]> getRankingArticulos(@RequestParam @DateTimeFormat(pattern = \"yyyy-MM-dd\") Date fechaInicio, @RequestParam @DateTimeFormat(pattern = \"yyyy-MM-dd\") Date fechaFin, @PathVariable Long idSucursal) {\r\n        LocalDate inicio = fechaInicio.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();\r\n        LocalDate fin = fechaFin.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();\r\n        return pedidoRepository.getRankingArticulos(inicio, fin, idSucursal);\r\n    }\r\n\r\n    @GetMapping(\"/ranking-promociones/{idSucursal}\")\r\n    public List<Object[]> getRankingPromocion(@RequestParam @DateTimeFormat(pattern = \"yyyy-MM-dd\") Date fechaInicio, @RequestParam @DateTimeFormat(pattern = \"yyyy-MM-dd\") Date fechaFin, @PathVariable Long idSucursal) {\r\n        LocalDate inicio = fechaInicio.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();\r\n        LocalDate fin = fechaFin.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();\r\n        return pedidoRepository.getRankingPromocion(inicio, fin, idSucursal);\r\n    }\r\n\r\n    @GetMapping(\"/getPorFecha/{idSucursal}\")\r\n    public ResponseEntity<List<PedidoDto>> getPorFecha(@RequestParam @DateTimeFormat(pattern = \"yyyy-MM-dd\") Date fechaInicio, @RequestParam @DateTimeFormat(pattern = \"yyyy-MM-dd\") Date fechaFin, @PathVariable Long idSucursal) {\r\n        return ResponseEntity.ok(pedidoService.getPorFecha(fechaInicio, fechaFin, idSucursal));\r\n    }\r\n\r\n    @PostMapping(\"/getPorEstado/{estado}/{idCliente}\")\r\n    public ResponseEntity<List<PedidoDto>> getPorEstado(@PathVariable Long idCliente, @PathVariable String estado) {\r\n\r\n        // Obtén todos los pedidos con el facade\r\n        List<PedidoDto> pedidos = facade.getAll();\r\n        List<PedidoDto> filteredPedidos = pedidos.stream()\r\n                .filter(a -> a.getCliente() != null\r\n                        && a.getCliente().getId().equals(idCliente)\r\n                        && !a.isEliminado()\r\n                        && a.getEstado().toString().equals(estado))\r\n                .collect(Collectors.toList());\r\n        return ResponseEntity.ok(filteredPedidos);\r\n    }\r\n\r\n\r\n    @GetMapping(\"/getPorCliente/{id}\")\r\n    public ResponseEntity<List<PedidoDto>> getPorCliente(@PathVariable Long id) {\r\n        // Obtén todos los pedidos con el facade\r\n        List<PedidoDto> pedidos = facade.getAll();\r\n        List<PedidoDto> filteredPedidos = pedidos.stream()\r\n                .filter(a -> a.getCliente() != null && a.getCliente().getId().equals(id)\r\n                        && !a.isEliminado())\r\n                .collect(Collectors.toList());\r\n        return ResponseEntity.ok(filteredPedidos);\r\n    }\r\n\r\n\r\n    @Override\r\n    @GetMapping(\"/{id}\")\r\n    public ResponseEntity<PedidoDto> getById(@PathVariable Long id) {\r\n        //obtengo el pedido con el facade aca los articulos son nulos\r\n        PedidoDto pedido = facade.getById(id);\r\n        return ResponseEntity.ok(pedido);\r\n    }\r\n\r\n    @PutMapping(\"/asignarEmpleado/{idEmpleado}/{idPedido}\")\r\n    public ResponseEntity<?> asignarEmpleado(@PathVariable Long idEmpleado, @PathVariable Long idPedido) {\r\n        return ResponseEntity.ok(facade.asignarEmpleado(idEmpleado, idPedido));\r\n    }\r\n\r\n    @PutMapping(\"/cambiarEstado/{id}\")\r\n    public ResponseEntity<?> cambiarEstado(@RequestBody Estado entity, @PathVariable Long id) {\r\n        try {\r\n            Pedido pedido = pedidoRepository.getById(id);\r\n            pedido.setEstado(entity);\r\n            pedidoRepository.save(pedido);\r\n            return ResponseEntity.ok(facade.getById(id));\r\n        } catch (Exception e) {\r\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"El pedido no ha podido cambiarse\");\r\n        }\r\n\r\n    }\r\n\r\n\r\n    @PostMapping()\r\n    public ResponseEntity<PedidoDto> create(@RequestBody PedidoCreateDto entity) {\r\n        try {\r\n            return ResponseEntity.ok(facade.createNew(entity));\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();\r\n        }\r\n    }\r\n\r\n    @CrossOrigin(origins = \"http://localhost:5173\")\r\n    @PostMapping(\"/api/create_preference_mp\")\r\n    public ResponseEntity<PedidoDto> crearPreferenciaMercadoPago(@RequestBody PedidoCreateDto pedido) {\r\n        MercadoPagoController cMercadoPago = new MercadoPagoController();\r\n        Preference preference = cMercadoPago.getPreferenciaIdMercadoPago(pedido);\r\n        return create(pedido);\r\n    }\r\n\r\n    @PutMapping(\"/cancelar/{id}\")\r\n    public ResponseEntity<?> cancelar(@PathVariable Long id) {\r\n        Pedido pedido = pedidoRepository.getById(id);\r\n        if (pedido.getEstado() == Estado.PENDIENTE) {\r\n            pedido.setEstado(Estado.CANCELADO);\r\n            pedidoRepository.save(pedido);\r\n            return ResponseEntity.ok(facade.getById(id));\r\n        } else {\r\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"El pedido no está en estado pendiente y no puede ser cancelado.\");\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/buensaborback/presentation/rest/PedidoController.java b/src/main/java/com/example/buensaborback/presentation/rest/PedidoController.java
--- a/src/main/java/com/example/buensaborback/presentation/rest/PedidoController.java	(revision cb479404d33de5aa73072e2b401f4736a2672363)
+++ b/src/main/java/com/example/buensaborback/presentation/rest/PedidoController.java	(date 1718363794256)
@@ -147,6 +147,7 @@
     public ResponseEntity<PedidoDto> crearPreferenciaMercadoPago(@RequestBody PedidoCreateDto pedido) {
         MercadoPagoController cMercadoPago = new MercadoPagoController();
         Preference preference = cMercadoPago.getPreferenciaIdMercadoPago(pedido);
+
         return create(pedido);
     }
 
